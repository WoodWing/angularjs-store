'use strict';
var Hook = (function() {
    function t(t, o) {
      var n = this;
      (this.$$called = !1),
        (this.matches = function(t) {
          return n.$$match(t);
        }),
        (this.$$match = t),
        (this.$$callback = o);
    }
    return (
      (t.prototype.run = function(t) {
        this.$$callback(t, !this.$$called), (this.$$called = !0);
      }),
      t
    );
  })(),
  HookLink = (function() {
    function t(t) {
      this.$$destroyer = t;
    }
    return (
      (t.prototype.destroy = function() {
        this.$$destroyer();
      }),
      (t.prototype.destroyOn = function(t) {
        var o = this;
        t.$on('$destroy', function() {
          o.$$destroyer();
        });
      }),
      t
    );
  })();
function holdState(t) {
  var o = angular.copy(t);
  return {
    get: function() {
      return angular.copy(o);
    },
    set: function(t) {
      for (var n in t) t.hasOwnProperty(n) && n in o && (o[n] = angular.copy(t[n]));
    },
  };
}
var NgStore = (function() {
  function t(t) {
    (this.$$hooks = []), (this.$$stateHolder = holdState(t));
  }
  return (
    (t.prototype.copy = function() {
      return this.$$stateHolder.get();
    }),
    (t.prototype.hook = function(t, o) {
      var n,
        r = this;
      if ('string' == typeof t)
        n =
          '*' === t
            ? function() {
                return !0;
              }
            : function(o) {
                return o === t;
              };
      else if (Array.isArray(t)) {
        n = function(o) {
          return t.includes(o);
        };
      } else {
        if (!(t instanceof RegExp)) throw new TypeError('Invalid hook query.');
        n = function(o) {
          return t.test(o);
        };
      }
      if (!angular.isFunction(o)) throw new TypeError('Invalid hook callback.');
      var e = new Hook(n, o);
      return (
        this.$$hooks.push(e),
        e.run(this.$$stateHolder.get()),
        new HookLink(function() {
          r.$$hooks.splice(r.$$hooks.indexOf(e), 1);
        })
      );
    }),
    (t.prototype.dispatch = function(t, o) {
      var n = angular.isFunction(o) ? o(this.$$stateHolder.get()) : o;
      this.$$stateHolder.set(n);
      var r = this.$$stateHolder.get();
      this.$$hooks
        .filter(function(o) {
          return o.matches(t);
        })
        .forEach(function(t) {
          t.run(r);
        });
    }),
    t
  );
})();
module.exports = NgStore;
//# sourceMappingURL=angularjs-store.min.js.map
